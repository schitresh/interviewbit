#include<list>
int capacity;
list<int> nodes;
unordered_map<int,int> cache;
    
LRUCache::LRUCache(int c) {
    capacity = c;
    nodes.clear();
    cache.clear();
}

int LRUCache::get(int key) {
    if(cache.find(key) == cache.end()) return -1;
    nodes.remove(key);
    nodes.push_front(key);
    return cache[key];
}

void LRUCache::set(int key, int value) {
    if(cache.find(key) == cache.end()){
        if(cache.size() == capacity){
            cache.erase(nodes.back());
            nodes.pop_back();
        }
    }
    else nodes.remove(key);
    
    cache[key] = value;
    nodes.push_front(key);
}

